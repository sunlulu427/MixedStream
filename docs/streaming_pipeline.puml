@startuml
title Streaming Pipeline Overview

interface PipelineStage
interface PipelinePad

enum PipelineRole {
  SOURCE
  FILTER
  SINK
}

class StreamingPipeline {
  start()
  pause()
  resume()
  stop()
  shutdown()
}

abstract class PipelineSource {
  +name : String
  +role : PipelineRole
  +connect(pad)
  +disconnect(pad)
  +emit(frame)
}

class PipelinePad~T~ {
  +push(frame : T)
}

class EncodedAudioFrame {
  +buffer : ByteBuffer
  +info : MediaCodec.BufferInfo
}

class EncodedVideoFrame {
  +buffer : ByteBuffer
  +info : MediaCodec.BufferInfo
}

class AudioCaptureNode {
  +start()
  +pause()
  +resume()
  +stop()
  +setMute(Boolean)
}

class VideoCaptureNode {
  +start()
  +pause()
  +resume()
  +stop()
  +setVideoBitrate(Int)
  +setWatermark(Watermark)
}

class TransportNode {
  +audioPad : PipelinePad
  +videoPad : PipelinePad
  +updateAudioConfiguration(AudioConfiguration, ByteArray)
  +updateVideoConfiguration(VideoConfiguration)
}

PipelineStage <|.. PipelineSource
PipelineSource o-- "*" PipelinePad
PipelineStage <|-- AudioCaptureNode
PipelineStage <|-- VideoCaptureNode
PipelineStage <|-- TransportNode
PipelineSource <|-- AudioCaptureNode
PipelineSource <|-- VideoCaptureNode

StreamingPipeline o--> AudioCaptureNode
StreamingPipeline o--> VideoCaptureNode
StreamingPipeline o--> TransportNode

AudioCaptureNode --> PipelinePad : emits EncodedAudioFrame
VideoCaptureNode --> PipelinePad : emits EncodedVideoFrame
PipelinePad --> TransportNode : delivers frames

TransportNode --> StreamingPipeline : stats callbacks

note bottom of PipelinePad
Pads decouple producers and consumers, enabling
pluggable pipeline stages with minimal wiring.
end note

@enduml
