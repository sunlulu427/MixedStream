@startuml
title 屏幕录制推流链路

skinparam participant {
  BackgroundColor #2b2b2b
  BorderColor #999999
  FontColor #f0f0f0
}
skinparam participant<<control>> {
  BackgroundColor #4a4a4a
  BorderColor #777777
  FontColor #f0f0f0
}
skinparam participant<<core>> {
  BackgroundColor #D4AF37
  BorderColor #B8941F
  FontColor #2b2b2b
}
skinparam participant<<infrastructure>> {
  BackgroundColor #2b2b2b
  BorderColor #555555
  FontColor #cccccc
}
skinparam participant<<external>> {
  BackgroundColor #333333
  BorderColor #666666
  FontColor #aaaaaa
}
skinparam ArrowColor #c0c0c0
skinparam defaultFontName "JetBrains Mono"

participant LiveActivity <<control>>
participant ScreenLiveCoordinator <<control>>
participant ScreenStreamController <<control>>
participant ScreenVideoController <<core>>
participant VulkanScreenRenderer <<infrastructure>>
participant ScreenAudioController <<core>>
participant MixedAudioProcessor <<infrastructure>>
participant TransportNode <<core>>
participant RtmpSender <<infrastructure>>
participant "MediaProjection" as Projection <<external>>
participant ScreenOverlayManager <<infrastructure>>

== 权限与初始化 ==
LiveActivity -> ScreenLiveCoordinator: requestProjection()
LiveActivity -> Projection: startActivityForResult
Projection --> LiveActivity: RESULT_OK (Intent)
LiveActivity -> ScreenLiveCoordinator: attachProjection(MediaProjection)
ScreenLiveCoordinator -> ScreenStreamController: setScreenCapture(projection,config)
ScreenLiveCoordinator -> ScreenStreamController: prepare(context)

== 推流启动 ==
LiveActivity -> ScreenLiveCoordinator: startStreaming()
ScreenLiveCoordinator -> RtmpSender: connect(url)
RtmpSender --> ScreenLiveCoordinator: onConnected()
ScreenLiveCoordinator -> ScreenStreamController: start()

== 视频采集 ==
ScreenStreamController -> ScreenVideoController: start()
ScreenVideoController -> VulkanScreenRenderer: start()
Projection -> VulkanScreenRenderer: VirtualDisplay frame
VulkanScreenRenderer -> ScreenVideoController: onFrame(Bitmap)
ScreenVideoController -> ScreenStreamController: onVideoData(EncodedFrame)

== 音频采集 ==
ScreenStreamController -> ScreenAudioController: start()
ScreenAudioController -> MixedAudioProcessor: startRecording()
MixedAudioProcessor -> ScreenAudioController: onPcmData(mixed)
ScreenAudioController -> ScreenStreamController: onAudioData(EncodedFrame)

== 发送 ==
ScreenStreamController -> TransportNode: push(audio/video)
TransportNode -> RtmpSender: pushAudio()/pushVideo()
RtmpSender -> "Native RTMP" <<infrastructure>>: pushFrame()

== 后台悬浮窗 ==
LiveActivity -> ScreenOverlayManager: show(state)
ScreenLiveCoordinator -> ScreenOverlayManager: update(state)
LiveActivity -> ScreenOverlayManager: hide()

note over MixedAudioProcessor
同时拉取麦克风和 playback PCM，
使用 16-bit 饱和混音后送至 AAC 编码器。
end note

note over VulkanScreenRenderer
通过 MediaProjection 的 VirtualDisplay 获取 RGBA 帧，
利用 Android HardwareRenderer(Vulkan backend) 将帧绘制到
编码 Surface，避免 OpenGL 依赖。
end note

@enduml
